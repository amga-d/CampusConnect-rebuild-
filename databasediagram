Here are the MySQL queries to create the database schema for the **CampusConnect** website:

### 1. Create the Database
```sql
CREATE DATABASE campusconnect;
USE campusconnect;
```

---

### 2. Create `Users` Table
```sql
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    profile_image VARCHAR(255),
    bio TEXT,
    birthdate DATE,
    gender ENUM('Male', 'Female') NOT NULL;
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

-- To add the new columns queries:-
-- ALTER TABLE Users
-- ADD COLUMN birthdate DATE,
-- ADD COLUMN gender ENUM('Male', 'Female') NOT NULL;
---

### 3. Create `Communities` Table
```sql
CREATE TABLE Communities (
    community_id INT AUTO_INCREMENT PRIMARY KEY,
    community_name VARCHAR(255) NOT NULL,
    description TEXT,
    profile_image VARCHAR(255),
    created_by INT NOT NULL,
    requirement_status ENUM('open', 'closed') DEFAULT 'open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES Users(user_id)
);
```

---

### 4. Create `Community_Members` Table
```sql
CREATE TABLE Community_Members (
    membership_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    user_id INT NOT NULL,
    role ENUM('admin', 'member) NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);
```

---

### 5. Create `Events` Table
```sql
CREATE TABLE Events (
    event_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    description TEXT,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE
);
```

---

### 6. Create `Announcements` Table
```sql
CREATE TABLE Announcements (
    announcement_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);
```
### 7. Create `news` Table
```
CREATE TABLE news (
    news_id INT AUTO_INCREMENT PRIMARY KEY,
    news_name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    news_image VARCHAR(255)
);
```


```
ALTER TABLE communities ADD community_type varchar(50);
ALTER TABLE communities CHANGE requirement_status recruitment_status enum('open','closed');
ALTER TABLE users ADD birthdate DATE, COLUMN gender ENUM('Male', 'Female') NOT NULL;
ALTER TABLE community_members ADD COLUMN membership_status ENUM('approved', 'pending') NOT NULL;
ALTER TABLE communities ADD COLUMN community_privacy ENUM('public', 'private') NOT NULL;
alter table community_members modify column role enum('admin','member','core_member') NOT NULL;

---

ALTER TABLE Events
DROP COLUMN start_date,
DROP COLUMN end_date,
ADD COLUMN image_path VARCHAR(255) NULL;



//new events table:-

CREATE TABLE events (
    event_id INT AUTO_INCREMENT PRIMARY KEY,
    community_id INT NOT NULL,
    creator_id INT NOT NULL,
    event_name VARCHAR(255) NOT NULL,
    description TEXT,
    image_path VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (community_id) REFERENCES Communities(community_id) ON DELETE CASCADE,
    FOREIGN KEY (creator_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

### Relationships Recap
1. **`Users` ↔ `Communities`:**
   - A user can create a community (`created_by` in `Communities` references `Users`).
   
2. **`Users` ↔ `Community_Members`:**
   - Users can join multiple communities with roles as admin or member.

3. **`Communities` ↔ `Community_Members`:**
   - Communities have many users.

4. **`Communities` ↔ `Events`:**
   - Communities host events.

5. **`Communities` ↔ `Announcements`:**
   - Communities have announcements made by users.

---

Let me know if you'd like additional queries, such as **insert**, **select**, or **join** examples!

